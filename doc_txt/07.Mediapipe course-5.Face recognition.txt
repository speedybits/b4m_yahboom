5. Face recognition  
1、synopsis  
MediaPipe is a data stream processing machine learning application development framework 
developed and open-source by Google. It is a graph based data processing pipeline that enables 
the construction of various forms of data sources, such as video, frequency, sensor data, and any 
time series data. MediaPipe is cross platform and can run on embedded platforms (such as 
Raspberry Pi), mobile devices (iOS and Android), workstations, and servers, while supporting 
mobile GPU acceleration. MediaPipe provides cross platform, customizable ML solutions for real-
time and streaming media. The core framework of MediaPipe is implemented in C++and provides 
support for languages such as Java and Objective C. The main concepts of MediaPipe include 
Packets, Streams, Calculators, Graphs, and Subgraphs.

The characteristics of MediaPipe：

End to end acceleration: Built in fast ML inference and processing that can accelerate even 
on regular hardware。
Build once, deploy anytime, anywhere: Unified solution suitable for Android, iOS, 
desktop/cloud, web, and IoT。
Instant solution: A cutting-edge ML solution that showcases all features of the framework。
Free and open source: Framework and solution under Apache 2.0, fully scalable and 
customizable.

2、 Face recognition  
2.1、activate  

1. First, set the proxy IP for the ROS-wifi image transmission module. For specific steps, please 
refer to the tutorial 1. Basic Usage of ROS-Wifi Image Transmission Module on Micros 
Car. This tutorial will not cover this process in detail.

2. The Linux system is connected to the ROS-wifi image transfer module, and the Docker is 
started. Enter the following command to establish a connection with the ROS-wifi image 
transfer module.

#Use the provided system for direct input

sh start_Camera_computer.sh

#Systems that are not data:

docker run -it --rm -v /dev:/dev -v /dev/shm:/dev/shm --privileged --net=host 

microros/micro-ros-agent:humble udp4 --port 9999 -v4



If the preceding information is displayed, the proxy connection is successful

3. Open a new terminal and execute the following command

ros2 run yahboom_esp32_mediapipe 05_FaceEyeDetection

4. Notes

"If the camera angle is not centered, the Linux system needs to connect to the car agent. 
Please refer to the specific steps for development preparation before proceeding with 
tutorial 0. which provides essential information for a quick start (must-read). This 
tutorial will not provide further elaboration."
After connecting the car's agent, enter the following command

ros2 run yahboom_esp32_mediapipe control_servo

After the steering engine is in the center, press "ctrl+C" to end the program.



5. If the camera picture is upside down, see 3. Camera picture correction (must-read) 
tutorial, this tutorial is no longer explained

2.2、Code parsing  
The location of the function source code is located,

~/b4m_yahboom/src/yahboom_esp32_mediapipe/yahboom_esp32_mediapipe/05_FaceEyeDe

tection.py

class FaceEyeDetection(Node):

    def __init__(self,name):

        super().__init__(name)

        self.bridge = CvBridge()

        self.eyeDetect = cv.CascadeClassifier( 

"/home/yahboom/b4m_yahboom/src/yahboom_esp32_mediapipe/yahboom_esp32_mediapipe

/file/haarcascade_eye.xml")

        self.faceDetect = 

cv.CascadeClassifier("/home/yahboom/b4m_yahboom/src/yahboom_esp32_mediapipe/ya

hboom_esp32_mediapipe/file/haarcascade_eye.xml")

        self.pub_rgb = self.create_publisher(Image,"/FaceEyeDetection/image", 

500)

    def cancel(self):

        self.pub_rgb.unregister()

    def face(self, frame):

        gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)

        faces = self.faceDetect.detectMultiScale(gray, 1.3)

        for face in faces: frame = self.faceDraw(frame, face)

        return frame

    def eye(self, frame):

        gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)

        eyes = self.eyeDetect.detectMultiScale(gray, 1.3)

        for eye in eyes:

            cv.circle(frame, (int(eye[0] + eye[2] / 2), int(eye[1] + eye[3] / 

2)), (int(eye[3] / 2)), (0, 0, 255), 2)

        return frame

    def faceDraw(self, frame, bbox, l=30, t=10):

        x, y, w, h = bbox

        x1, y1 = x + w, y + h

        cv.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 255), 2)

        # Top left x,y

        cv.line(frame, (x, y), (x + l, y), (255, 0, 255), t)

        cv.line(frame, (x, y), (x, y + l), (255, 0, 255), t)

        # Top right x1,y

        cv.line(frame, (x1, y), (x1 - l, y), (255, 0, 255), t)

        cv.line(frame, (x1, y), (x1, y + l), (255, 0, 255), t)

        # Bottom left x1,y1

        cv.line(frame, (x, y1), (x + l, y1), (255, 0, 255), t)

        cv.line(frame, (x, y1), (x, y1 - l), (255, 0, 255), t)

        # Bottom right x1,y1

        cv.line(frame, (x1, y1), (x1 - l, y1), (255, 0, 255), t)



        cv.line(frame, (x1, y1), (x1, y1 - l), (255, 0, 255), t)

        return frame

    def pub_img(self, frame):

        self.pub_rgb.publish(self.bridge.cv2_to_imgmsg(frame, "bgr8"))

class MY_Picture(Node):

    def __init__(self, name):

        super().__init__(name)

        self.bridge = CvBridge()

        self.sub_img = self.create_subscription(

            CompressedImage, '/espRos/esp32camera', self.handleTopic, 1) 

        self.face_eye_detection = FaceEyeDetection('face_eye_detection')

        self.content = ["face", "eye", "face_eye"]

        self.content_index = 0

    def handleTopic(self, msg):

        start = time.time()

        frame = self.bridge.compressed_imgmsg_to_cv2(msg)

        frame = cv.resize(frame, (640, 480))

        cv.waitKey(10)

        

        action = cv.waitKey(1) & 0xFF

        if action == ord("f") or action == ord("F"):

            self.content_index += 1

            if self.content_index >= len(self.content): self.content_index = 0

        if self.content[self.content_index] == "face": frame = 

self.face_eye_detection.face(frame)

        elif self.content[self.content_index] == "eye": frame = 

self.face_eye_detection.eye(frame)

        else: frame = 

self.face_eye_detection.eye(self.face_eye_detection.face(frame))

                

        end = time.time()

        fps = 1 / (end - start)

        text = "FPS : " + str(int(fps))

        cv.putText(frame, text, (20, 30), cv.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 

255), 1)

        cv.imshow('frame', frame)

        self.face_eye_detection.pub_img(frame)

        # print(frame)

    

        cv.waitKey(10)

def main():

    print("start it")

    rclpy.init()

    esp_img = MY_Picture("My_Picture")

    try:

            rclpy.spin(esp_img)

    except KeyboardInterrupt:



        pass

    finally:

        esp_img.destroy_node()

        rclpy.shutdown()

The main process of the program: subscribe to the image from esp32, through MediaPipe to do 
the relevant recognition, and then through opencv to display the processed image.

 

 

 

 

 

 

 

 

 

 